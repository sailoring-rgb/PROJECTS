<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>const int N = 6;
typedef int[0,N-1] airplaneId;
bool justTookOff = false;

chan request[N], waitSignal[N], goneSignal[N];
urgent chan freeSignal[N];
</declaration>
	<template>
		<name>Airplane</name>
		<parameter>const airplaneId id</parameter>
		<declaration>clock time;</declaration>
		<location id="id0" x="42" y="-127">
			<name x="-34" y="-135">Flying</name>
		</location>
		<location id="id1" x="42" y="136">
			<name x="-68" y="136">Middleware1</name>
			<label kind="invariant" x="-60" y="153">time &lt;= 10</label>
		</location>
		<location id="id2" x="637" y="136">
			<name x="654" y="127">Landing</name>
			<label kind="invariant" x="654" y="144">time &lt;= 3</label>
		</location>
		<location id="id3" x="348" y="-161">
			<name x="314" y="-144">Waiting2</name>
		</location>
		<location id="id4" x="637" y="-127">
			<name x="654" y="-136">Parked</name>
		</location>
		<location id="id5" x="535" y="-271">
			<name x="535" y="-305">Middleware2</name>
			<label kind="invariant" x="552" y="-288">time &lt;= 10</label>
		</location>
		<location id="id6" x="144" y="-271">
			<name x="152" y="-314">TakingOff</name>
			<label kind="invariant" x="161" y="-297">time &lt;= 3</label>
		</location>
		<location id="id7" x="348" y="34">
			<name x="314" y="0">Waiting1</name>
		</location>
		<location id="id8" x="637" y="-8">
			<name x="654" y="-17">Parking</name>
			<label kind="invariant" x="654" y="0">time &lt;= 6</label>
		</location>
		<init ref="id0"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id4"/>
			<label kind="guard" x="646" y="-85">time &gt;= 4</label>
			<label kind="synchronisation" x="646" y="-68">goneSignal[id]!</label>
		</transition>
		<transition id="id10">
			<source ref="id2"/>
			<target ref="id8"/>
			<label kind="guard" x="646" y="59">time &gt;= 2</label>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="25" y="-331">time &gt;= 1</label>
			<label kind="assignment" x="8" y="-314">time := 0</label>
			<nail x="135" y="-339"/>
			<nail x="68" y="-280"/>
		</transition>
		<transition id="id12">
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="450" y="43">freeSignal[id]?</label>
			<label kind="assignment" x="484" y="60">time := 0</label>
		</transition>
		<transition id="id13">
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="guard" x="169" y="43">time &lt;= 5</label>
			<label kind="synchronisation" x="85" y="60">waitSignal[id]?</label>
		</transition>
		<transition id="id14">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="135" y="-203">freeSignal[id]?</label>
			<label kind="assignment" x="212" y="-186">time := 0</label>
		</transition>
		<transition id="id15">
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="441" y="-212">time &lt;= 5</label>
			<label kind="synchronisation" x="407" y="-195">waitSignal[id]?</label>
		</transition>
		<transition id="id16">
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="25" y="-229">time &gt;= 1</label>
			<label kind="synchronisation" x="-43" y="-212">goneSignal[id]!</label>
			<label kind="assignment" x="-85" y="-195">justTookOff := true</label>
		</transition>
		<transition id="id17">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="305" y="-313">time &gt;= 5</label>
			<label kind="assignment" x="305" y="-296">time := 0</label>
		</transition>
		<transition id="id18">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="594" y="-220">request[id]!</label>
			<label kind="assignment" x="603" y="-203">time := 0</label>
		</transition>
		<transition id="id19">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="297" y="145">time &gt;= 5</label>
			<label kind="assignment" x="297" y="162">time := 0</label>
			<nail x="620" y="136"/>
		</transition>
		<transition id="id20">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-68" y="-8">request[id]!</label>
			<label kind="assignment" x="-229" y="8">time := 0, justTookOff := false</label>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<declaration>airplaneId list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(airplaneId element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
airplaneId front()
{
   return list[0];
}

// Returns the last element of the queue
airplaneId tail()
{
   return list[len - 1];
}</declaration>
		<location id="id21" x="-765" y="-178">
			<name x="-782" y="-212">Idle</name>
		</location>
		<location id="id22" x="-527" y="17">
			<name x="-527" y="-17">Checking</name>
		</location>
		<location id="id23" x="-527" y="187">
			<committed/>
		</location>
		<init ref="id21"/>
		<transition id="id24">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="select" x="-399" y="-136">e : airplaneId</label>
			<label kind="guard" x="-399" y="-119">e == front()</label>
			<label kind="synchronisation" x="-399" y="-102">goneSignal[e]?</label>
			<label kind="assignment" x="-399" y="-85">dequeue()</label>
			<nail x="-408" y="17"/>
			<nail x="-408" y="-178"/>
		</transition>
		<transition id="id25">
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-731" y="136">waitSignal[tail()]!</label>
			<nail x="-586" y="102"/>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="-518" y="76">e : airplaneId</label>
			<label kind="synchronisation" x="-518" y="93">request[e]?</label>
			<label kind="assignment" x="-518" y="110">enqueue(e)</label>
		</transition>
		<transition id="id27">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="select" x="-680" y="-136">e : airplaneId</label>
			<label kind="guard" x="-663" y="-119">len == 0</label>
			<label kind="synchronisation" x="-646" y="-102">request[e]?</label>
			<label kind="assignment" x="-620" y="-85">enqueue(e)</label>
		</transition>
		<transition id="id28">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-841" y="-68">len &gt; 0</label>
			<label kind="synchronisation" x="-943" y="-51">freeSignal[front()]!</label>
			<nail x="-765" y="17"/>
		</transition>
	</template>
	<system>system Airplane, Controller;
</system>
	<queries>
		<option key="--exploration" value="0"/>
		<query>
			<formula/>
			<comment>======== Reachable Properties:</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (exists (i:airplaneId) Airplane(i).Landing)</formula>
			<comment>Um avião pode alcançar a aterragem.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:29 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; (exists (i:airplaneId) Airplane(i).TakingOff)</formula>
			<comment>Um avião pode alcançar a descolagem.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:28 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Controller.Checking</formula>
			<comment>O Controller pode receber e guardar pedidos de aviões.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:27 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Airplane(0).Landing and (forall (i:airplaneId) i != 0 imply (Airplane(i).Waiting1 or Airplane(i).Waiting2))
</formula>
			<comment>O avião 0 pode estar a aterrar enquanto que todos os outros estão à espera.</comment>
		</query>
		<query>
			<formula/>
			<comment>======== Safety Properties:</comment>
		</query>
		<query>
			<formula>A[] forall (i:airplaneId) forall (j:airplaneId) Airplane(i).Landing &amp;&amp; Airplane(j).Landing imply i == j</formula>
			<comment>Não pode haver mais do que um avião a aterrar ao mesmo tempo.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:18 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] (Airplane(0).time &gt; 5 &amp;&amp; Airplane(0).Middleware1) imply (Airplane(0).Middleware1 &amp;&amp; Airplane(0).time &lt;= 10)</formula>
			<comment>Se um avião esperar 5 unidades de tempo e não tiver recebido um sinal de espera, então deve permanecer no mesmo estado por mais 5 unidades de tempo.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:17 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:airplaneId) Airplane(i).Parked imply Airplane(i).time &gt;= 4</formula>
			<comment>Um avião deve demorar, no mínimo, 4 unidades de tempo para aterrar e estacionar.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:16 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:airplaneId) (Airplane(i).Landing or Airplane(i).Parking) imply Airplane(i).time &lt;= 6</formula>
			<comment>Um avião deve demorar, no máximo, 6 unidades de tempo para aterrar e estacionar.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:15 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:airplaneId) (Airplane(i).Flying &amp;&amp; justTookOff) imply Airplane(i).time &gt;= 1</formula>
			<comment>Um avião deve demorar, no mínimo, 1 unidade de tempo para levantar voo.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 22:51:10 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:airplaneId) Airplane(i).TakingOff imply Airplane(i).time &lt;= 3</formula>
			<comment>Um avião deve demorar, no máximo, 3 unidades de tempo para levantar voo.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:13 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] Controller.list[N] == 0</formula>
			<comment>Não pode haver o sobrecarregamento da lista com N aviões.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:11 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>======== Liveness Properties:</comment>
		</query>
		<query>
			<formula>(Controller.Checking &amp;&amp; Controller.len &gt; 1) --&gt; (forall (i: airplaneId) i != Controller.list[0] imply (Airplane(i).Waiting1 || Airplane(i).Waiting2))</formula>
			<comment>Se já existir um pedido de avião em corrente processamento, todos os pedidos que eventualmente chegarem ficarão à espera.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 16:02:10 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>(Airplane(0).Waiting1 &amp;&amp; 0 == Controller.list[0]) --&gt; Airplane(0).Landing</formula>
			<comment>Sempre que um avião à espera de aterrar for o próximo da lista, eventualmente ele poderá aterrar.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 17:07:54 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>(Airplane(0).Waiting2 &amp;&amp; 0 == Controller.list[0]) --&gt; Airplane(0).TakingOff</formula>
			<comment>Sempre que um avião à espera de descolar for o próximo da lista, eventualmente ele poderá levantar voo.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 17:08:29 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>(Airplane(0).Middleware1 &amp;&amp; Controller.len == 1) --&gt; Airplane(0).Landing</formula>
			<comment>Sempre que o recurso compartilhado estiver disponível quando um avião pedir para aterrar, eventualmente ele poderá aterrar.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 17:13:39 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>(Airplane(0).Middleware2 &amp;&amp; Controller.len == 1) --&gt; Airplane(0).TakingOff</formula>
			<comment>Sempre que o recurso compartilhado estiver disponível quando um avião pedir para descolar, eventualmente ele poderá descolar.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 17:13:53 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>Airplane(0).Landing --&gt; Airplane(0).Parked</formula>
			<comment>Sempre que um avião estiver a aterrar, eventualmente ele será estacionado.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-17 17:29:50 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>======== Deadlock Checking:</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-19 14:32:01 +0100">
				<option key="--exploration" value="0"/>
			</result>
		</query>
	</queries>
</nta>
